# Auth config
# local admin user will get created if doesn't exist
mms.admin.username=test
mms.admin.password=test
mms.stream.batch.size=100000

# jwt issued by mms for logins via /authentication
jwt.secret=make_me_something_really_long
jwt.expiration=86400
jwt.header=Authorization

# LDAP config
ldap.provider.base=ou=personnel,dc=dir,dc=domain,dc=com
ldap.provider.url=ldaps://your-ldap.domain.com/${ldap.provider.base}
# user and pass to connect to ldap, can be empty if ldap server allows anonymous searches
ldap.provider.userdn=
ldap.provider.password=
# ldap user dn pattern, {0} will be replaced with username
ldap.user.dn.pattern=uid={0}
ldap.user.attributes.username=uid
ldap.user.attributes.email=mail
# attribute name of the group name
ldap.group.role.attribute=cn
# to find groups a user belongs to - search base and ldap search filter
ldap.group.search.base=ou=personnel,dc=dir,dc=domain,dc=com
ldap.group.search.filter=(&(objectClass=group)(uniqueMember={0}))

# RDB config
# if using mysql instead of postgres, comment and uncomment the corresponding properties
spring.datasource.url=jdbc:postgresql://localhost:5432
#spring.datasource.url=jdbc:mysql://localhost:3306
spring.datasource.database=mms
spring.datasource.username=mmsuser
spring.datasource.password=test1234
spring.datasource.driver-class-name=org.postgresql.Driver
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.initialization-mode=never

# specifies a prefix for the mms created project db
rdb.project.prefix=mms

# The SQL dialect makes Hibernate generate better SQL for the chosen database
# comment and uncomment postgres/mysql as needed
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL10Dialect
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect
#spring.jpa.properties.hibernate.dialect.storage_engine=innodb
# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.open-in-view=false

spring.main.allow-bean-definition-overriding=true

# Elasticsearch config
elasticsearch.host=localhost
elasticsearch.port=9200
elasticsearch.http=http
elasticsearch.limit.result=10000
elasticsearch.limit.term=1000
elasticsearch.limit.scrollTimeout=1000
elasticsearch.limit.get=10000
elasticsearch.limit.index=5000
elasticsearch.limit.commit=100000

# s3 storage config for artifacts
s3.endpoint=http://localhost:9000
s3.access_key=admintest
s3.secret_key=admintest
s3.region=somewhere
# optional if using minio
s3.bucket=mms

# Swagger UI config https://springdoc.org/
springdoc.swagger-ui.path=/v3/swagger-ui.html
springdoc.swagger-ui.operationsSorter=alpha
springdoc.swagger-ui.tagsSorter=alpha
springdoc.default-produces-media-type=application/json
springdoc.swagger-ui.displayOperationId=true

# Logbook config https://github.com/zalando/logbook
logging.level.org.zalando.logbook=TRACE
logbook.filter.form-request-mode=off
# exclude swagger ui and actuator
logbook.exclude=/v3/**,/actuator/**
#logbook.write.max-body-size=-1
logbook.strategy=without-body
# style can be splunk|http|json|curl
logbook.format.style=splunk

# https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html
# https://www.baeldung.com/spring-boot-health-indicators
# currently all /actuator/* endpoints require 'mmsadmin' authority, except for /actuator/health
management.endpoints.web.exposure.include=*
#management.endpoints.web.exposure.exclude=configprops,env
management.endpoint.health.show-details=when_authorized
management.endpoint.health.roles=mmsadmin
